#version 330 core
out vec4 FragColor;
  
in vec3 fragmentColor;
in vec3 Normal;  
in vec3 FragPos; 

uniform vec3 lightColor;
uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform vec3 obj_color;

void main()
{
    vec3 ambient = 0.6 * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);  

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm); 

	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 1);
	vec3 specular = 0.1 * spec * lightColor;  

    vec3 result = (ambient + diffuse + specular) * obj_color;
	FragColor = vec4(result, 1.0);
}  
